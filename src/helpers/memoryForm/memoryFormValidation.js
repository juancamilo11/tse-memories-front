//Initial values for the section #1 form of the store setup.
export const formInitialValues = {
  id: "",
  name: "",
  memoryDate: "",
  creationDate: "",
  visibility: "",
  tag: "",
  tagList: [],
  memoryPhotoText: "",
  memoryPhotoImg: "",
  memoryPhotoDescription: "",
  memoryPhotoList: [],
  country: "",
  city: "",
};

export const formInitialErrorState = {
  //   id: { hasErrors: false, message: "" }, --> Autogenerated
  name: { hasErrors: false, message: "" },
  memoryDate: { hasErrors: false, message: "" },
  //   creationDate: { hasErrors: false, message: "" }, --> Autogenerated
  visibility: { hasErrors: false, message: "" },
  tag: { hasErrors: false, message: "" },
  memoryPhotoText: { hasErrors: false, message: "" },
  memoryPhotoImg: { hasErrors: false, message: "" },
  memoryPhotoDescription: { hasErrors: false, message: "" },
  country: { hasErrors: false, message: "" },
  city: { hasErrors: false, message: "" },
};

export const visibilityTypes = [
  { type: "PUBLIC", label: "Public" },
  { type: "PROTECTED", label: "Protected" },
  { type: "PRIVATE", label: "Private" },
];

export const memoryFormValidator = (e, setErrorsState) => {
  const { name: fieldName, value } = e.target;
  switch (fieldName) {
    case "storeName":
      handleNameValidation(value, setErrorsState);
      break;
    case "slogan":
      handleMemoryDateValidation(value, setErrorsState);
      break;
    case "description":
      handleVisibilityValidation(value, setErrorsState);
      break;
    case "tag":
      handleTagValidation(value, setErrorsState);
      break;
    case "startingDate":
      handleMemoryPhotoTextValidation(value, setErrorsState);
      break;
    case "startingDate":
      handleMemoryPhotoImgValidation(value, setErrorsState);
      break;
    case "startingDate":
      handleMemoryPhotoDescriptionValidation(value, setErrorsState);
      break;
    case "startingDate":
      handleCountryValidation(value, setErrorsState);
      break;
    case "endingDate":
      handleCityValidation(value, setErrorsState);
      break;
    default:
      break;
  }
};

//Generic function
const setErrorStateForField = (
  setErrorsState,
  fieldName,
  hasErrors,
  message
) => {
  setErrorsState((state) => {
    return {
      ...state,
      [`${fieldName}`]: {
        hasErrors,
        message,
      },
    };
  });
};

const handleNameValidation = (value, setErrorsState) => {};
const handleMemoryDateValidation = (value, setErrorsState) => {};
const handleVisibilityValidation = (value, setErrorsState) => {};
const handleTagValidation = (value, setErrorsState) => {};
const handleMemoryPhotoTextValidation = (value, setErrorsState) => {};
const handleMemoryPhotoImgValidation = (value, setErrorsState) => {};
const handleMemoryPhotoDescriptionValidation = (value, setErrorsState) => {};
const handleCountryValidation = (value, setErrorsState) => {};
const handleCityValidation = (value, setErrorsState) => {};

export const memoryFormSubmitValidation = (
  formValues,
  tagsList,
  errorsState
) => {};
